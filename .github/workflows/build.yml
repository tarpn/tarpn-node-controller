# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Build

on:
  push:
    paths-ignore: ['README.md']
    branches: [ main ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: [self-hosted, arm]
    env:
      SERVICE_UNIT_NAME: 'tarpn-core-${{ github.sha }}-${{ github.run_id }}'
    steps:
    - name: Clean working directory
      shell: bash
      run: |
        echo "Cleaning up previous run"
        rm -rf "$GITHUB_WORKSPACE/*"
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        python3.7 -m pip install --upgrade pip
        python3.7 -m pip install virtualenv
        python3.7 -m virtualenv venv
        source venv/bin/activate
        pip install -e .[develop]
        python setup.py bdist_wheel
        python setup.py sdist
    - name: Test with pytest
      run: |
        source venv/bin/activate
        pytest
    - name: Archive prebuilt wheel
      uses: actions/upload-artifact@v2
      with:
        name: dist
        path: dist
    - name: Setup BATS
      uses: mig4/setup-bats@v1
    - name: Setup Bats libs
      uses: brokenpip3/setup-bats-libs@0.1.0
    - name: Install package and systemd unit
      run: |
        mkdir -p ~/.config/systemd/user/

        bats -t scripts/test-install.bats

        echo "Patched service unit:"; cat scripts/tarpn-core.service
        cp scripts/tarpn-core.service ~/.config/systemd/user/${SERVICE_UNIT_NAME}.service

        echo "Installing service"
        loginctl enable-linger pi
        sleep 1
        XDG_RUNTIME_DIR=/run/user/$UID systemctl --user daemon-reload
        XDG_RUNTIME_DIR=/run/user/$UID systemctl --user enable $SERVICE_UNIT_NAME || (echo "Failed to enable service"; exit 1)
        XDG_RUNTIME_DIR=/run/user/$UID systemctl --user start $SERVICE_UNIT_NAME || (echo "Failed to start service"; exit 1)
        sleep 10
        XDG_RUNTIME_DIR=/run/user/$UID systemctl --user status $SERVICE_UNIT_NAME > status.txt || exit 0
        echo "systemctl status:"; cat status.txt
        grep -i started status.txt  || (echo "Service didn't start"; exit 1)
        test -f ${SERVICE_UNIT_NAME}/config/node.ini || (echo "Should have bootstrapped default config file node.ini"; exit 1)
        grep -i callsign status.txt || (echo "Should have failed with default config"; exit 1)
        sleep 1
    - name: Cleanup install
      if: always()
      run: |
        XDG_RUNTIME_DIR=/run/user/$UID systemctl --user disable $SERVICE_UNIT_NAME || echo "Failed to disable service"
        rm -f ~/.config/systemd/user/${SERVICE_UNIT_NAME}.service
    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
          files: dist/*
          prerelease: true
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  docker-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          platforms: amd64,arm,arm64
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Docker build
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: false
          tags: tarpn/tarpn-core:latest
          cache-from: type=registry,ref=tarpn/tarpn-core:latest
          cache-to: type=inline
  docker-test:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - uses: actions/checkout@v2
      - name: Docker test build
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: false
          file: tests/docker/Dockerfile
          tags: tarpn/tarpn-test:latest
          cache-from: type=inline
          cache-to: type=inline


