# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Build

on:
  push:
    paths-ignore: ['README.md']
    branches: [ main ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: [self-hosted, arm]
    env:
      SERVICE_UNIT_NAME: 'tarpn-core-${{ github.sha }}-${{ github.run_id }}'
    steps:
    - name: Clean working directory
      shell: bash
      run: |
        echo "Cleaning up previous run"
        rm -rf "$GITHUB_WORKSPACE/*"
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        python3.7 -m pip install --upgrade pip
        python3.7 -m pip install virtualenv
        python3.7 -m virtualenv venv
        source venv/bin/activate
        pip install -e .[develop]
        python setup.py bdist_wheel
        python setup.py sdist
    - name: Test with pytest
      run: |
        source venv/bin/activate
        pytest
    - name: Archive prebuilt wheel
      uses: actions/upload-artifact@v2
      with:
        name: dist
        path: dist
    - name: Install package and systemd unit
      run: |
        bats scripts/test-install.bats
        echo "Installing wheel into empty virtualenv"
        python3.7 -m virtualenv ${SERVICE_UNIT_NAME}
        ${SERVICE_UNIT_NAME}/bin/pip install dist/*.whl
        test -f ${SERVICE_UNIT_NAME}/bin/tarpn-node || (echo "tarpn-core was not installed!"; find ${SERVICE_UNIT_NAME}; exit 1)

        echo "Patching service unit"
        cat scripts/tarpn-core.service
        export INSTALL_DIR=$(readlink -f ${SERVICE_UNIT_NAME})
        sed -i "s|/opt/tarpn-core|${INSTALL_DIR}|g" scripts/tarpn-core.service
        sed -i "/^User=/d" scripts/tarpn-core.service

        echo "Patched service unit:"; cat scripts/tarpn-core.service
        mkdir -p ~/.config/systemd/user/
        cp scripts/tarpn-core.service ~/.config/systemd/user/${SERVICE_UNIT_NAME}.service

        echo "Installing service"
        loginctl enable-linger pi
        sleep 1
        XDG_RUNTIME_DIR=/run/user/$UID systemctl --user daemon-reload
        XDG_RUNTIME_DIR=/run/user/$UID systemctl --user enable $SERVICE_UNIT_NAME
        XDG_RUNTIME_DIR=/run/user/$UID systemctl --user start $SERVICE_UNIT_NAME
        sleep 1
        XDG_RUNTIME_DIR=/run/user/$UID systemctl --user status $SERVICE_UNIT_NAME > status.txt
        grep -i started status.txt  || (echo "Service didn't start"; exit 1)
        test -f ${SERVICE_UNIT_NAME}/config/node.ini || (echo "Should have bootstrapped default config file node.ini"; exit 1)
        grep -i callsign status.txt || (echo "Should have failed with default config"; exit 1)
        sleep 1
    - name: Cleanup install
      if: always()
      run: |
        XDG_RUNTIME_DIR=/run/user/$UID systemctl --user disable $SERVICE_UNIT_NAME || echo "Failed to disable service"
        rm -f ~/.config/systemd/user/${SERVICE_UNIT_NAME}.service
    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
          files: dist/*
          prerelease: true
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 

